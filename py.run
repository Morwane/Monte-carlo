import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import yfinance as yf

# Définir les dates
endDate = dt.datetime.now()
startDate = endDate - dt.timedelta(days=300)

# Liste des actions et ajout du suffixe '.NS'
stockList = ['AMZN', 'AAPL', 'GOOGL', 'MSFT', 'JPM', 'META']
stocks =stockList

# Fonction pour obtenir les données
def get_data(stocks, start, end):
    stockData = yf.download(stocks, start=start, end=end)
    stockData = stockData['Close']
    returns = stockData.pct_change()
    meanReturns = returns.mean()
    covMatrix = returns.cov()
    return meanReturns, covMatrix

# Obtenir les données
meanReturns, covMatrix = get_data(stocks, startDate, endDate)

#print(meanReturns)


#print(covMatrix)

weights= np.random.random(len(meanReturns))
weights/= np.sum(weights)

#print(weights)

#Monte Carlo Method
#nombre de simulations

mc_sims=100
T=100 #timeframe in days



meanM =np.full(shape=(T,len(weights)), fill_value=meanReturns)
meanM=meanM.T

portfolio_sims=np.full(shape=(T,mc_sims),fill_value=0.0)

initialPortfolio=10000

for m in range(0,mc_sims):
    #MC loops
    Z=np.random.normal(size=(T,len(weights)))
    L=np.linalg.cholesky(covMatrix)
    dailyReturns=meanM+np.inner(L,Z)
    portfolio_sims[:,m]=np.cumprod(np.inner(weights,dailyReturns.T)+1)*initialPortfolio

plt.plot(portfolio_sims)
plt.ylabel('Portfolio Value ($)')
plt.xlabel('Days')
plt.title('Monte Carlo simulation of a stock portfolio')
plt.show()






